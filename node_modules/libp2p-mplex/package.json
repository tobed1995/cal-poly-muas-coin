{
  "_from": "libp2p-mplex",
  "_id": "libp2p-mplex@0.8.0",
  "_inBundle": false,
  "_integrity": "sha512-bjpHYqyxYNsnyKRgeATVU8u1wnP1vV/rEL+TOuVCv9WBnUPBifL9e+ggbEQtIQfZDsiDl3l43i8MJDuRKOag7A==",
  "_location": "/libp2p-mplex",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "libp2p-mplex",
    "fetchSpec": "latest",
    "name": "libp2p-mplex",
    "raw": "libp2p-mplex",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/libp2p-mplex/-/libp2p-mplex-0.8.0.tgz",
  "_shasum": "2f647b247659e0189c0ca2b0528e4db7a6d79528",
  "_shrinkwrap": null,
  "_spec": "libp2p-mplex",
  "_where": "/home/viziosde/gitlab.com/ViziosDe/mvb-blockchain",
  "author": {
    "email": "daviddias@ipfs.io",
    "name": "David Dias"
  },
  "bugs": {
    "url": "https://github.com/libp2p/js-libp2p-mplex/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "David Dias",
      "email": "daviddias.p@gmail.com"
    },
    {
      "name": "Dmitriy Ryajov",
      "email": "dryajov@gmail.com"
    },
    {
      "name": "Francisco Baio Dias",
      "email": "xicombd@gmail.com"
    },
    {
      "name": "Friedel Ziegelmayer",
      "email": "dignifiedquire@gmail.com"
    },
    {
      "name": "Pedro Teixeira",
      "email": "pedro@protocol.ai"
    },
    {
      "name": "Pius Nyakoojo",
      "email": "piusnyakoojo@gmail.com"
    },
    {
      "name": "Richard Littauer",
      "email": "richard.littauer@gmail.com"
    },
    {
      "name": "Stephen Whitmore",
      "email": "stephen.whitmore@gmail.com"
    },
    {
      "name": "Steven Allen",
      "email": "steven@stebalien.com"
    },
    {
      "name": "Victor Bjelkholm",
      "email": "victorbjelkholm@gmail.com"
    },
    {
      "name": "greenkeeperio-bot",
      "email": "support@greenkeeper.io"
    }
  ],
  "dependencies": {
    "async": "^2.6.1",
    "chunky": "0.0.0",
    "concat-stream": "^1.6.2",
    "debug": "^3.1.0",
    "duplexify": "^3.6.0",
    "interface-connection": "~0.3.2",
    "pull-catch": "^1.0.0",
    "pull-stream": "^3.6.8",
    "pull-stream-to-stream": "^1.3.4",
    "pump": "^3.0.0",
    "readable-stream": "^2.3.6",
    "stream-to-pull-stream": "^1.7.2",
    "through2": "^2.0.3",
    "varint": "^5.0.0"
  },
  "deprecated": false,
  "description": "JavaScript implementation of https://github.com/libp2p/mplex",
  "devDependencies": {
    "aegir": "^14.0.0",
    "chai": "^4.1.2",
    "dirty-chai": "^2.0.1",
    "interface-stream-muxer": "~0.5.9",
    "libp2p-tcp": "~0.12.0",
    "libp2p-websockets": "~0.12.0",
    "pre-commit": "^1.2.2",
    "pull-pair": "^1.1.0"
  },
  "homepage": "https://github.com/libp2p/js-libp2p-mplex#readme",
  "keywords": [
    "IPFS"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "name": "libp2p-mplex",
  "optionalDependencies": {},
  "readme": "js-libp2p-mplex\n===================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Build Status](https://travis-ci.org/libp2p/js-libp2p-mplex.svg?style=flat-square)](https://travis-ci.org/libp2p/js-libp2p-mplex)\n![](https://img.shields.io/badge/coverage-%3F-yellow.svg?style=flat-square)\n[![Dependency Status](https://david-dm.org/libp2p/js-libp2p-mplex.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p-mplex)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n\n> JavaScript implementation of https://github.com/libp2p/mplex\n\n[![](https://github.com/libp2p/interface-stream-muxer/raw/master/img/badge.png)](https://github.com/libp2p/interface-stream-muxer)\n\n## Usage\n\nLet's define a `listener.js`, which starts a TCP server on port 9999 and waits for a connection. Once we get a connection, we wait for a stream. And finally, once we have the stream, we pull the data from that stream, and printing it to the console.\n\n```JavaScript\nconst mplex = require('libp2p-mplex')\nconst tcp = require('net')\nconst pull = require('pull-stream')\nconst toPull = require('stream-to-pull-stream')\n\nconst listener = tcp.createServer((socket) => {\n  console.log('[listener] Got connection!')\n\n  const muxer = mplex.listener(toPull(socket))\n\n  muxer.on('stream', (stream) => {\n    console.log('[listener] Got stream!')\n    pull(\n      stream,\n      pull.drain((data) => {\n        console.log('[listener] Received:')\n        console.log(data.toString())\n      })\n    )\n  })\n})\n\nlistener.listen(9999, () => {\n  console.log('[listener] listening on 9999')\n})\n```\n\nNow, let's define `dialer.js` who will connect to our `listener` over a TCP socket. Once we have that, we'll put a message in the stream for our `listener`.\n\n```JavaScript\nconst mplex = require('libp2p-mplex')\nconst tcp = require('net')\nconst pull = require('pull-stream')\nconst toPull = require('stream-to-pull-stream')\n\nconst socket = tcp.connect(9999)\n\nconst muxer = mplex.dialer(toPull(socket))\n\nconsole.log('[dialer] opening stream')\nconst stream = muxer.newStream((err) => {\n  console.log('[dialer] opened stream')\n  if (err) throw err\n})\n\npull(\n  pull.values(['hey, how is it going. I am the dialer']),\n  stream\n)\n```\n\nNow we can first run `listener.js` and then `dialer.js` to see the\nfollowing output:\n\n*listener.js*\n\n```\n$ node listener.js\n[listener] listening on 9999\n[listener] Got connection!\n[listener] Got stream!\n[listener] Received:\nhey, how is it going. I am the dialer\n```\n\n*dialer.js*\n\n```\n$ node dialer.js\n[dialer] opening stream\n[dialer] opened stream\n```\n\n## Install\n\n```sh\n> npm install libp2p-mplex\n```\n\n## API\n\n```js\nconst mplex = require('libp2p-mplex')\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/libp2p/js-libp2p-mplex.git"
  },
  "scripts": {
    "build": "aegir build",
    "coverage": "aegir coverage",
    "coverage-publish": "aegir coverage --provider coveralls",
    "lint": "aegir lint",
    "release": "aegir release -t node -t browser",
    "release-major": "aegir release --type major -t node -t browser",
    "release-minor": "aegir release --type minor -t node -t browser",
    "test": "aegir test -t node -t browser",
    "test:browser": "aegir test -t browser",
    "test:node": "aegir test -t node"
  },
  "version": "0.8.0"
}
